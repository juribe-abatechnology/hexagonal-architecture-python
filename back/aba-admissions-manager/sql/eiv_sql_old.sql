---- CASH FLOW, EIV AND REVENUE ESTIMATE QUERY

--query1 = """
WITH CONNEC AS (
    SELECT
        /*+ PARALLEL(4) */
        A.ID as ID,
        A.START_DATE as START_DATE,
        A.END_DATE as END_DATE,
        A.service_number AS authorization_number,
        B.NAME as SERVICE_NAME,
        B.DISPLAY_CODE as DISPLAY_CODE,
        D.FIRST_NAME || ' ' || D.LAST_NAME AS NAME,
        D.STATUS,
        E.NAME AS LOCATION,
        E.REGION,
        F.NAME AS PAYOR,
        D.TRACKING_ID AS CLIENTTRACKINGID,
        C.IS_PRIMARY,
        PAYOR_STATUS,
        F.PAYOR_TYPE,
        CASE
            WHEN DISPLAY_CODE IN ('97153', '99999', 'H2019', '0373T') THEN 'Direct Service'
            WHEN DISPLAY_CODE IN ('99997', '97155') THEN 'Protocol Modification/Supervision'
            WHEN DISPLAY_CODE IN ('99998', '97156') THEN 'Caregiver Training'
            ELSE DISPLAY_CODE
        END AS SERVICE,
        (A.UNITS) / 4 AS AUTH_HOURS,
        DIV0(
            (AVG(a.UNITS) / 4),
            AVG(DATEDIFF('DAY', START_DATE, END_DATE) / 7)
        ) AS TX_PLAN
    FROM
        "ABACONNECT"."PUBLIC"."CLIENT_ENROLLMENT_SERVICES" A
        LEFT JOIN "ABACONNECT"."PUBLIC"."SERVICES" B ON A.SERVICE_ID = B.ID
        LEFT JOIN "ABACONNECT"."PUBLIC"."CLIENT_ENROLLMENTS" C ON A.CLIENT_ENROLLMENT_ID = C.ID
        LEFT JOIN "ABACONNECT"."PUBLIC"."CLIENTS" D ON D.ID = C.CLIENT_ID
        LEFT JOIN (
            SELECT
                ID,
                REPLACE(
                    SUBSTRING(
                        REPLACE(NAME, ' ', ''),
                        CHARINDEX(',', REPLACE(NAME, ' ', '')) + 1,
                        2
                    ),
                    ' ',
                    ''
                ) AS STATE,
                NAME,
                CASE
                    WHEN STATE = 'FL' THEN 'ABACFL'
                    WHEN STATE = 'PA' THEN 'ABACPA'
                    WHEN STATE IN ('MA', 'NH') THEN 'ABACOA'
                    WHEN STATE = 'NJ' THEN 'ABACNJ'
                    ELSE NULL
                END AS REGION
            FROM
                "ABACONNECT"."PUBLIC"."CLINICS"
        ) e ON D.CLINIC_ID = E.ID
        LEFT JOIN "ABACONNECT"."PUBLIC"."FUNDING_SOURCES" F ON cast(F.ID as string) = C.FUNDING_SOURCE_ID
    WHERE
        B.DISPLAY_CODE NOT IN ('97151', '98888', '97152', 'H0032', 'H0031', '96113') ---AND D.STATUS = '0'   
        AND A.END_DATE > CAST(CURRENT_TIMESTAMP AS DATE)
        AND A.START_DATE < CAST(CURRENT_TIMESTAMP AS DATE)
        AND IS_PRIMARY = TRUE
    GROUP BY
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
),
PAYOR_STATUS AS (
    SELECT
        CLIENTTRACKINGID,
        PAYOR_STATUS,
        PAYOR_TYPE
    FROM
        CONNEC
    GROUP BY
        1,
        2,
        3
),
INCOMES AS (
    SELECT
        B.TRANID AS CHARGEID,
        B.CLAIM_ID,
        B.PAYOR,
        B.COMPANYNAME,
        B.CONNECT_TRACKING_ID,
        B.CLIENT_NAME,
        B.CPT,
        B.CLAIM_STATUS_DESC,
        B.STATE,
        C.REGION,
        B.CLAIM_AMOUNT_BILLED AS BILLED,
        B.CLAIM_INSURANCE_PAID,
        B.CLAIM_CLIENT_PAID,
        B.CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID AS COLLECTED,
        B.CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE AS ALLOWED,
        CLAIM_BALANCE AS BALANCE,
        A.CREDITTYPE,
        B.SCA_FLAG,
        A.COINS AS COINSURANCE,
        B.UNITS,
        MULTIPLAN_FLAG,
        B.BILLED_AT,
        A.RECEIVED,
CASE
            WHEN A.CREDITTYPE in ('1', '2') THEN A.AMOUNT
            WHEN CREDITTYPE = 'T' THEN A.TOTAMT
        END AS COLLECTED_CREDITS,
        A.ALLOWED AS ALLOWED_CREDITS,
        D.PAYOR_STATUS,
        CASE
            WHEN PAYOR_TYPE = 0 THEN 'Comercial'
            when PAYOR_TYPE = 1 THEN 'Medicaid'
            when payor_type is null then 'Self-pay'
        end as PAYOR_TYPE
    FROM
        COLLAB_DATA.PUBLIC.CREDIT A
        LEFT JOIN STAGE_ABACONNECT.MULTIPLAN.TBL_MULTIPLAN B ON B.TRANID = A.CHARGEID
        LEFT JOIN COLLAB_DATA.PUBLIC.COMPANY C ON A.CUSTNO = C.CUSTNO
        LEFT JOIN PAYOR_STATUS D ON upper(D.CLIENTTRACKINGID) = B.CONNECT_TRACKING_ID
    WHERE
        B.CO_ABB = 'ABA'
        AND DOS >= '2022-01-01'
        --AND DOS <= '2023-07-26'
        AND A.CREDITTYPE IN ('1', '2', 'T')
        AND A.DELETED = 0
        AND COLLECTED_CREDITS > 0
        AND BILLTO IN ('3', '5', 'H')
),
RENDER_DATE AS (
    SELECT
        CLIENTTRACKINGID,
        DOS,
        SERVICECODE,
        MIN(DATE_TRUNC(DAY, RENDERED_AT)) AS RENDER_DATE
    FROM
        LIBRARY.PUBLIC.VW_MASTER_SERVICES_ABA
    WHERE
        RENDERED_AT IS NOT NULL ---AND STATUS IN ('rendered','auth_pending','scheduled')
    GROUP BY
        1,
        2,
        3
),
SALESFORCE_INFO_PREVIUS AS (
    SELECT
        DISTINCT A.ADMISSION__C AS TRACKING_ID,
        GROUP_EMPLOYERS_NAME__C AS GROUP_NAME,
        A.GROUP__C AS GROUP_NUMBER,
        ---    SUBSCRIBER__C,
        A.SUBSCRIBER_NAME__C AS SUBSCRIBER,
        A.CREATEDDATE,
        CASE
            WHEN POLICY_A_SELF_FUNDED_ASO_POLICY__C = 'Yes' then 'Self funded'
            ELSE 'Fully Funded'
        end as funded_status,
        A.OON_FAM_DEDUCTIBLE__C AS OON_FAM_DEDUCTIBLE,
        A.INN_FAM_DEDUCTIBLE__C AS INN_FAM_DEDUCT,
        A.OON_FAM_OOP__C AS OON_FAM_OOP,
        A.INN_FAM_OOP__C AS IN_FAM_OOP,
        A.INN_IDV_OOP__C AS IN_IND_OOP,
        A.OON_IDV_OOP__C AS OON_IND_OOP,
        A.INN_IDV_DEDUCTIBLE__C AS IN_IDV_DEDUCTIBLE,
        A.OON_IDV_DEDUCTIBLE__C AS OON_IDV_DEDUCTIBLE,
        A.DEDUCTIBLES_AND_CO_PAYS_APPLY_TO_OPP__C AS DEDUCTUBLE_AND_COPAYS_APPLY_TO_OPP,
        A.CO_PAYS_INCLUDED_IN_OOP__C AS CO_PAYS,
        FAMILY_DEDUCTIBLE_TO_BE_MET__C AS DEDUCTUBLE_TO_BE_MED,
        INN_ABA_COPAY__C AS IN_COPAY,
        OON_ABA_COPAY__C AS OON_COPAY,
        INN_AND_OON_CROSS_ACCUMULATE__C AS INN_AND_OON_CROSS_ACUMULATIVE,
        plan_or_calendar_year__c AS PLAN_OR_CALENDAR_YEAR,
        PLAN_YEAR_START_MONTH__C AS START_MONTH,
        PLAN__C AS PLAN,
        A.NAME AS EIV,
        COBRA__C AS COBRA,
        CASE
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_IDV_OOP__C + A.OON_IDV_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_FAM_OOP__C + A.OON_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_IDV_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_IDV_OOP__C
        END AS OON_OOP,
        CASE
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_IDV_OOP__C + A.OON_IDV_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_FAM_OOP__C + A.OON_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_IDV_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_IDV_OOP__C
        END AS IN_OOP,
        CASE
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_IDV_DEDUCTIBLE__C + A.OON_IDV_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_FAM_DEDUCTIBLE__C + A.OON_FAM_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_IDV_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_FAM_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_FAM_OOP__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.OON_IDV_DEDUCTIBLE__C
        END AS OON_DEDUCTIBLE,
        CASE
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_IDV_DEDUCTIBLE__C + A.OON_IDV_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'Yes' THEN A.INN_FAM_DEDUCTIBLE__C + A.OON_FAM_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_IDV_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_FAM_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Individual'
            AND DEDUCTUBLE_TO_BE_MED = 'Family'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_FAM_DEDUCTIBLE__C
            WHEN TRIM(PLAN) = 'Group'
            AND DEDUCTUBLE_TO_BE_MED = 'Individual'
            AND INN_AND_OON_CROSS_ACCUMULATE__C = 'No' THEN A.INN_IDV_DEDUCTIBLE__C
        END AS IN_DEDUCTIBLE,
        INN_OP_CO_INSURANCE__C / 100 AS INN_COINSURANCE,
        OON_OP_CO_INSURANCE__C / 100 AS OON_COINSURANCE,
        REGEXP_SUBSTR(POLICY_NUMBER__C, '([a-zA-Z1-90 ]){3}', 1, 1) AS PREFIX,
        CASE
            WHEN ARE_THERE_OON_BENEFITS__C = 'Yes' THEN TRUE
            WHEN ARE_THERE_OON_BENEFITS__C = 'No' THEN FALSE
            ELSE FALSE
        END AS OON_BENEFITS,
        IFF(
            POLICY_TYPE__C IN ('PPO', 'POS', 'HMO', 'EPO'),
            POLICY_TYPE__C,
            NULL
        ) AS POLICY_TYPE,
        ROW_NUMBER() OVER(
            PARTITION BY ADMISSION__C
            ORDER BY
                CREATEDDATE ASC
        ) AS RANK
    FROM
        SALESFORCE.ABA.VERIFICATION_OF_BENEFITS__C A
    WHERE
        INSURANCE_TYPE__C = 'Primary'
        AND UPPER(ADMISSION__C) IS NOT NULL
) --- AND POLICY_TYPE__C= 'Medicaid' )
,
SALESFORCE_INFO AS (
    SELECT
        A.*,
        A.CREATEDDATE AS EFECTIVEDATE,
        COALESCE(B.CREATEDDATE, CURRENT_DATE) AS INNEFECTIVEDATE
    FROM
        SALESFORCE_INFO_PREVIUS A
        LEFT JOIN SALESFORCE_INFO_PREVIUS B ON A.RANK =(B.RANK -1)
        AND A.TRACKING_ID = B.TRACKING_ID
),
CASHFLOW_PREVIUS AS (
    SELECT
        B.TRANID AS CHARGEID,
        B.DOS,
        B.CLAIM_ID,
        B.PAYOR,
        B.COMPANYNAME,
        B.CONNECT_TRACKING_ID,
        B.CLIENT_NAME,
        B.CPT,
        B.CLAIM_STATUS_DESC,
        B.STATE,
        C.REGION,
        B.CLAIM_AMOUNT_BILLED AS BILLED,
        B.CLAIM_INSURANCE_PAID,
        B.CLAIM_CLIENT_PAID,
        B.CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID AS COLLECTED,
        B.CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE AS ALLOWED,
        CLAIM_BALANCE AS BALANCE,
        A.CREDITTYPE,
        B.SCA_FLAG,
        A.COINS AS COINSURANCE,
        B.UNITS,
        MULTIPLAN_FLAG,
        B.BILLED_AT,
        A.RECEIVED,
CASE
            WHEN A.CREDITTYPE in ('1', '2') THEN A.AMOUNT
            WHEN CREDITTYPE = 'T' THEN A.TOTAMT
        END AS COLLECTED_CREDITS,
        A.ALLOWED AS ALLOWED_CREDITS,
        D.PAYOR_STATUS,
        CASE
            WHEN PAYOR_TYPE = 0 THEN 'Comercial'
            when PAYOR_TYPE = 1 THEN 'Medicaid'
            when payor_type is null then 'Self-pay'
        end as PAYOR_TYPE,
        RENDER_DATE,
        F.GROUP_NAME,
        F.GROUP_NUMBER,
        F.FUNDED_STATUS,
        F.SUBSCRIBER,
        F.PREFIX,
        DATEDIFF(DAY, RENDER_DATE, BILLED_AT) AS DAYS_TO_BILL,
        DATEDIFF(DAY, B.DOS, RENDER_DATE) AS DAYS_TO_RENDER,
        DATEDIFF(DAY, RENDER_DATE, RECEIVED) AS DAYS_BETWEEN_RENDER_RECEIVED,
        DATEDIFF(DAY, BILLED_AT, RECEIVED) AS DAYS_BETWEEN_BILL_RECEIVED,
        BILLTO
    FROM
        COLLAB_DATA.PUBLIC.CREDIT A
        LEFT JOIN STAGE_ABACONNECT.MULTIPLAN.TBL_MULTIPLAN B ON B.TRANID = A.CHARGEID
        LEFT JOIN COLLAB_DATA.PUBLIC.COMPANY C ON A.CUSTNO = C.CUSTNO
        LEFT JOIN PAYOR_STATUS D ON upper(D.CLIENTTRACKINGID) = B.CONNECT_TRACKING_ID
        LEFT JOIN RENDER_DATE E ON UPPER(E.CLIENTTRACKINGID) = UPPER(B.CONNECT_TRACKING_ID)
        AND E.SERVICECODE = B.CPT
        AND B.DOS = E.DOS
        LEFT JOIN SALESFORCE_INFO F ON B.CONNECT_TRACKING_ID = UPPER(F.TRACKING_ID)
        AND (F.CREATEDDATE <= B.DOS)
    WHERE
        B.CO_ABB = 'ABA'
        AND B.DOS >= '2022-01-01'
        --AND B.DOS <= '2023-07-26'
        AND A.DELETED = 0 --AND --BILLTO IN ('3','5','H')
),
CASHFLOW AS (
    SELECT
        *
    FROM
        CASHFLOW_PREVIUS
    WHERE
        BILLTO IN ('3', '5', 'H')
        AND COLLECTED_CREDITS > 0
        AND CREDITTYPE IN ('1', 'T') QUALIFY ROW_NUMBER() OVER(
            PARTITION BY CHARGEID
            ORDER BY
                RECEIVED ASC
        ) = 1
) ---BEGIN OF THE BUCKETS

/*SELECT *
 FROM AVG_DAYS_BY_PAYOR
 WHERE PAYOR='OPTUMHEALTH BEHAVIORAL SOLUTIONS'
 */
,
MAIN AS (
    SELECT
        B.*,
        F.GROUP_NAME,
        F.GROUP_NUMBER,
        F.FUNDED_STATUS,
        F.SUBSCRIBER,
        PREFIX,
        EIV,
        OON_BENEFITS,
        POLICY_TYPE
    FROM
        STAGE_ABACONNECT.MULTIPLAN.TBL_MULTIPLAN B
        LEFT JOIN SALESFORCE_INFO F ON B.CONNECT_TRACKING_ID = UPPER(F.TRACKING_ID)
        AND B.DOS >= F.EFECTIVEDATE
        AND B.DOS <= INNEFECTIVEDATE
    WHERE
        1 = 1
        AND BILLTO IN ('3', '5', 'H')
        AND B.CO_ABB = 'ABA'
        AND YEAR(DOS) > 2017
),
ALLOWED_BY_SUBS AS (
    SELECT
        YEAR(DOS) AS DOS,
        SUBSCRIBER,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_GROUP AS (
    SELECT
        YEAR(DOS) AS DOS,
        GROUP_NUMBER,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_FUNDED AS (
    SELECT
        YEAR(DOS) AS DOS,
        FUNDED_STATUS,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_CLIENT AS (
    SELECT
        YEAR(DOS) AS DOS,
        PAYOR,
        CLIENT_NAME,
        CONNECT_TRACKING_ID,
        --CPT,
        SCA_FLAG, 
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 ---  AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3,
        4,
        5--,
        --6
),
ALLOWED_BY_PREFIX AS (
    SELECT
        YEAR(DOS) AS DOS,
        PREFIX,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_PAYOR AS (
    SELECT
        YEAR(DOS) AS DOS,
        PAYOR,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_COMPANY AS (
    SELECT
        YEAR(DOS) AS DOS,
        A.COMPANYNAME,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN A
        LEFT JOIN COLLAB_DATA.PUBLIC.COMPANY B ON B.COMPANYNAME = A.COMPANYNAME
    WHERE
        1 = 1 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_STATE AS (
    SELECT
        YEAR(DOS) AS DOS,
        A.STATE,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN A
    WHERE
        1 = 1
        AND YEAR(DOS) > 2017 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_ALL_COMPANY AS (
    SELECT
        YEAR(DOS) AS DOS,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1 --- AND datediff(DAY,DOS, current_date-1)<=90
        AND BILLTO IN ('3', '5', 'H')
        AND YEAR(DOS) > 2017
    GROUP BY
        1,
        2--,
        --3
),
------------------------- SPECIFIC TIME SEGMENTATION -------------------------------------
ALLOWED_BY_SUBS_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        SUBSCRIBER,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1 
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_GROUP_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        GROUP_NUMBER,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_FUNDED_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        FUNDED_STATUS,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_CLIENT_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        PAYOR,
        CLIENT_NAME,
        CONNECT_TRACKING_ID,
        --CPT,
        SCA_FLAG, 
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3,
        4,
        5--,
        --6
),
ALLOWED_BY_PREFIX_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        PREFIX,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_PAYOR_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        PAYOR,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_COMPANY_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        A.COMPANYNAME,
       -- CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN A
        LEFT JOIN COLLAB_DATA.PUBLIC.COMPANY B ON B.COMPANYNAME = A.COMPANYNAME
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_STATE_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        A.STATE,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN A
    WHERE
        1 = 1
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2,
        3--,
        --4
),
ALLOWED_BY_ALL_COMPANY_PERIOD AS (
    SELECT
        YEAR(DOS) AS DOS,
        --CPT,
        SCA_FLAG,
        --SUM(CLAIM_INSURANCE_PAID+CLAIM_CLIENT_PAID)/SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        SUM(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID + CLAIM_BALANCE) / SUM(CLAIM_AMOUNT_BILLED) AS COLLECTED_PER_UNIT,
        AVG(CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) COLLECTED_PULL,
        AVG(CLAIM_AMOUNT_BILLED) AS BILLED_AVG,
        COUNT(DISTINCT CLAIM_ID) AS NUMBER_OF_CLAIMS
    FROM
        MAIN
    WHERE
        1 = 1 
        AND datediff(DAY,DOS, current_date-1)<=180
        AND BILLTO IN ('3', '5', 'H')
    GROUP BY
        1,
        2--,
        --3
),
MASTER_DATA AS (
    SELECT
        A.*,
        FUNDED_STATUS,
        SUBSCRIBER,
        GROUP_NUMBER,
        PREFIX,
        OON_BENEFITS,
        POLICY_TYPE,
        RENDER_DATE,
        D.RECEIVED,
        PAYOR_STATUS,
        PAYOR_TYPE,
        GROUP_NAME,
        COBRA,

        CASE
            WHEN PAYOR_TYPE = 1 THEN '0'
            WHEN PAYOR_STATUS = 'iin' then in_deductible
            else OON_DEDUCTIBLE
        END AS DEDUCTUBLE,
        CASE
            WHEN PAYOR_TYPE = 1 THEN '0'
            WHEN PAYOR_STATUS = 'iin' then IN_OOP
            else OON_OOP
        END AS OOT_OF_POCKET,
        CASE
            WHEN PAYOR_TYPE = 1 THEN '0'
            WHEN PAYOR_STATUS = 'iin' then INN_COINSURANCE
            else OON_COINSURANCE
        END AS CO_INSURANCE,
        CAST(
            CASE
                WHEN LENGTH(
                    SPLIT_PART(
                        replace(
                            CASE
                                WHEN PAYOR_TYPE = 1 THEN '0'
                                WHEN PAYOR_STATUS = 'iin' then IN_COPAY
                                else OON_COPAY
                            END,
                            '$'
                        ),
                        ' ',
                        0
                    )
                ) <= 3
                AND upper(
                    SPLIT_PART(
                        replace(
                            CASE
                                WHEN PAYOR_TYPE = 1 THEN '0'
                                WHEN PAYOR_STATUS = 'iin' then IN_COPAY
                                else OON_COPAY
                            END,
                            '$'
                        ),
                        ' ',
                        0
                    )
                ) NOT IN ('N/A', 'NO') THEN SPLIT_PART(
                    replace(
                        CASE
                            WHEN PAYOR_TYPE = 1 THEN '0'
                            WHEN PAYOR_STATUS = 'iin' then IN_COPAY
                            else OON_COPAY
                        END,
                        '$'
                    ),
                    ' ',
                    0
                )
            END AS INT
        ) AS COPAY
    FROM
        STAGE_ABACONNECT.MULTIPLAN.TBL_MULTIPLAN A
        LEFT JOIN RENDER_DATE B ON UPPER(B.CLIENTTRACKINGID) = UPPER(A.CONNECT_TRACKING_ID)
        AND B.SERVICECODE = A.CPT
        AND B.DOS = A.DOS
        LEFT JOIN SALESFORCE_INFO C ON A.CONNECT_TRACKING_ID = UPPER(C.TRACKING_ID)
        --AND B.DOS >= C.EFECTIVEDATE
        --AND B.DOS <= C.INNEFECTIVEDATE
        LEFT JOIN (
            SELECT
                CHARGEID,
                MIN(
                    CASE
                        WHEN RECEIVED IS NOT NULL THEN RECEIVED
                    END
                ) AS RECEIVED
            FROM
                COLLAB_DATA.PUBLIC.CREDIT
            WHERE
                DELETED = 0
                AND CREDITTYPE IN ('1', '2', 'T')
            GROUP BY
                1
        ) D ON D.CHARGEID = A.TRANID
        LEFT JOIN PAYOR_STATUS E ON upper(E.CLIENTTRACKINGID) = A.CONNECT_TRACKING_ID
    WHERE
        A.DOS >= '2022-01-01'
        AND A.BILLTO IN ('3','5','H')
        --AND A.DOS <= '2023-07-26'
        AND A.FREQUENCY != 8 
        AND A.CO_ABB = 'ABA'
),
LAST_DATA AS (
    SELECT
        A.CLAIM_ID,
        A.CONNECT_TRACKING_ID,
        A.CLIENT_NAME,
        A.BILLTO,
        A.COMPANYNAME,
        A.CLAIM_AMOUNT_BILLED,
        A.CLAIM_INSURANCE_PAID,
        A.CLAIM_INSURANCE_PAID + A.CLAIM_CLIENT_PAID AS COLLECTED,
        A.CLAIM_BALANCE,
        A.CLAIM_CLIENT_PAID,
        A.DOS,
        A.UNITS,
        A.PAYOR,
        --A.CPT,
        A.COLLAB_STATUS,
        A.MULTIPLAN_FLAG,
        A.SCA_FLAG,
        A.STATE,
        TRANID,
        A.BILLED_AT,
        (A.CLAIM_INSURANCE_PAID + A.CLAIM_CLIENT_PAID + A.CLAIM_BALANCE) AS ALLOWED,
        A.ADJUSTMENT,
        A.MODIFIER,
        A.POS,
        A.FUNDED_STATUS,
        A.SUBSCRIBER,
        A.GROUP_NUMBER,
        RENDER_DATE,
        DEDUCTUBLE AS DEDUCTIBLE,
        OOT_OF_POCKET AS OUT_OF_POCKET,
        CO_INSURANCE,
        COPAY,
        A.OON_BENEFITS,
        POLICY_TYPE,
        COBRA,
        A.PREFIX,
        PAYOR_STATUS,
        CASE
            WHEN PAYOR_TYPE = 0 THEN 'Comercial'
            when PAYOR_TYPE = 1 THEN 'Medicaid'
            when payor_type is null then 'Self-pay'
        end as PAYOR_TYPE,
        CASE
            WHEN CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID > 0
            OR BILLTO IN ('3', '5', 'H') THEN (CLAIM_INSURANCE_PAID + CLAIM_CLIENT_PAID) / UNITS
        END AS PAID_CLAIM_$,
        
        B.COLLECTED_PER_UNIT AS CLIENT_$,
        P.COLLECTED_PER_UNIT AS PREFIX_$,
        C.COLLECTED_PER_UNIT AS PAYOR_$,
        D.COLLECTED_PER_UNIT AS CLINIC_$,
        F.COLLECTED_PER_UNIT AS STATE_$,
        G.COLLECTED_PER_UNIT AS CPT_$,
        H.COLLECTED_PER_UNIT AS SUBS_$,
        I.COLLECTED_PER_UNIT AS GROUP_$,
        J.COLLECTED_PER_UNIT AS FUNDED_$,
        
        B.BILLED_AVG AS CLIENT_BILL,
        P.BILLED_AVG AS PREFIX_BILL,
        C.BILLED_AVG AS PAYOR_BILL,
        D.BILLED_AVG AS CLINIC_BILL,
        F.BILLED_AVG AS STATE_BILL,
        G.BILLED_AVG AS CPT_BILL,
        H.BILLED_AVG AS SUBS_BILL,
        I.BILLED_AVG AS GROUP_BILL,
        J.BILLED_AVG AS FUNDED_BILL,
        CASE
            WHEN A.SCA_FLAG = 'Yes' THEN A.RATE
        END AS RATE_SCA,
        CASE
            WHEN H.COLLECTED_PER_UNIT IS NOT NULL
            AND H.NUMBER_OF_CLAIMS >= 5 THEN H.COLLECTED_PER_UNIT
            WHEN APYSU.COLLECTED_PER_UNIT IS NOT NULL
            AND APYSU.NUMBER_OF_CLAIMS >= 5 THEN APYSU.COLLECTED_PER_UNIT
            WHEN I.COLLECTED_PER_UNIT IS NOT NULL
            AND I.NUMBER_OF_CLAIMS >= 5 THEN I.COLLECTED_PER_UNIT
            WHEN APYGR.COLLECTED_PER_UNIT IS NOT NULL
            AND APYGR.NUMBER_OF_CLAIMS >= 5 THEN APYGR.COLLECTED_PER_UNIT
            WHEN P.COLLECTED_PER_UNIT IS NOT NULL
            AND P.NUMBER_OF_CLAIMS >= 5 THEN P.COLLECTED_PER_UNIT
            WHEN APYPR.COLLECTED_PER_UNIT IS NOT NULL
            AND APYPR.NUMBER_OF_CLAIMS >= 5 THEN APYPR.COLLECTED_PER_UNIT 
            WHEN C.COLLECTED_PER_UNIT IS NOT NULL
            AND C.NUMBER_OF_CLAIMS >= 5 THEN C.COLLECTED_PER_UNIT
            WHEN APYPA.COLLECTED_PER_UNIT IS NOT NULL
            AND APYPA.NUMBER_OF_CLAIMS >= 5 THEN APYPA.COLLECTED_PER_UNIT
            WHEN J.COLLECTED_PER_UNIT IS NOT NULL
            AND J.NUMBER_OF_CLAIMS >= 5 THEN J.COLLECTED_PER_UNIT
            WHEN APYFU.COLLECTED_PER_UNIT IS NOT NULL
            AND APYFU.NUMBER_OF_CLAIMS >= 5 THEN APYFU.COLLECTED_PER_UNIT  
            WHEN F.COLLECTED_PER_UNIT IS NOT NULL
            AND F.NUMBER_OF_CLAIMS >= 5 THEN F.COLLECTED_PER_UNIT
            WHEN APYST.COLLECTED_PER_UNIT IS NOT NULL
            AND APYST.NUMBER_OF_CLAIMS >= 5 THEN APYST.COLLECTED_PER_UNIT
        END AS MASTER_COLLECTED,
        
        (B.NUMBER_OF_CLAIMS) AS CLIENT_CLAIMS,
        (C.NUMBER_OF_CLAIMS) AS PAYOR_CLAIMS,
        (D.NUMBER_OF_CLAIMS) AS CLINIC_CLAIMS,
        (F.NUMBER_OF_CLAIMS) AS STATE_CLAIMS,
        (G.NUMBER_OF_CLAIMS) AS CPT_CLAIMS,
        (H.NUMBER_OF_CLAIMS) AS SUBS_CLAIMS,
        (I.NUMBER_OF_CLAIMS) AS GROUP_CLAIMS,
        (J.NUMBER_OF_CLAIMS) AS FUNDED_CLAIMS,
        (P.NUMBER_OF_CLAIMS) AS PREFIX_CLAIMS,

        ------------------------ PREVIOUS YEAR ------------------------------------

        APYCL.COLLECTED_PER_UNIT AS CLIENT_$_PY,
        APYPR.COLLECTED_PER_UNIT AS PREFIX_$_PY,
        APYPA.COLLECTED_PER_UNIT AS PAYOR_$_PY,
        APYCL.COLLECTED_PER_UNIT AS CLINIC_$_PY,
        APYST.COLLECTED_PER_UNIT AS STATE_$_PY,
        APYAC.COLLECTED_PER_UNIT AS CPT_$_PY,
        APYSU.COLLECTED_PER_UNIT AS SUBS_$_PY,
        APYGR.COLLECTED_PER_UNIT AS GROUP_$_PY,
        APYFU.COLLECTED_PER_UNIT AS FUNDED_$_PY,
        
        APYCL.BILLED_AVG AS CLIENT_BILL_PY,
        APYPR.BILLED_AVG AS PREFIX_BILL_PY,
        APYPA.BILLED_AVG AS PAYOR_BILL_PY,
        APYCL.BILLED_AVG AS CLINIC_BILL_PY,
        APYST.BILLED_AVG AS STATE_BILL_PY,
        APYAC.BILLED_AVG AS CPT_BILL_PY,
        APYSU.BILLED_AVG AS SUBS_BILL_PY,
        APYGR.BILLED_AVG AS GROUP_BILL_PY,
        APYFU.BILLED_AVG AS FUNDED_BILL_PY,
        
        APYCL.NUMBER_OF_CLAIMS AS CLIENT_CLAIMS_PY,
        APYPR.NUMBER_OF_CLAIMS AS PAYOR_CLAIMS_PY,
        APYPA.NUMBER_OF_CLAIMS AS CLINIC_CLAIMS_PY,
        APYCL.NUMBER_OF_CLAIMS AS STATE_CLAIMS_PY,
        APYST.NUMBER_OF_CLAIMS AS CPT_CLAIMS_PY,
        APYAC.NUMBER_OF_CLAIMS AS SUBS_CLAIMS_PY,
        APYSU.NUMBER_OF_CLAIMS AS GROUP_CLAIMS_PY,
        APYGR.NUMBER_OF_CLAIMS AS FUNDED_CLAIMS_PY,
        APYFU.NUMBER_OF_CLAIMS AS PREFIX_CLAIMS_PY,

        ------------------------ SPECIFIC PERIOD OF TIME --------------------------
        
        APCL.COLLECTED_PER_UNIT AS CLIENT_$_PERIOD,
        APPR.COLLECTED_PER_UNIT AS PREFIX_$_PERIOD,
        APPA.COLLECTED_PER_UNIT AS PAYOR_$_PERIOD,
        APCO.COLLECTED_PER_UNIT AS CLINIC_$_PERIOD,
        APST.COLLECTED_PER_UNIT AS STATE_$_PERIOD,
        APAC.COLLECTED_PER_UNIT AS CPT_$_PERIOD,
        APSU.COLLECTED_PER_UNIT AS SUBS_$_PERIOD,
        APGR.COLLECTED_PER_UNIT AS GROUP_$_PERIOD,
        APF.COLLECTED_PER_UNIT AS FUNDED_$_PERIOD,
        
        APCL.BILLED_AVG AS CLIENT_BILL_PERIOD,
        APPR.BILLED_AVG AS PREFIX_BILL_PERIOD,
        APPA.BILLED_AVG AS PAYOR_BILL_PERIOD,
        APCO.BILLED_AVG AS CLINIC_BILL_PERIOD,
        APST.BILLED_AVG AS STATE_BILL_PERIOD,
        APAC.BILLED_AVG AS CPT_BILL_PERIOD,
        APSU.BILLED_AVG AS SUBS_BILL_PERIOD,
        APGR.BILLED_AVG AS GROUP_BILL_PERIOD,
        APF.BILLED_AVG AS FUNDED_BILL_PERIOD,
        CASE
            WHEN APSU.COLLECTED_PER_UNIT IS NOT NULL
            AND APSU.NUMBER_OF_CLAIMS >= 5 THEN APSU.COLLECTED_PER_UNIT
            WHEN APGR.COLLECTED_PER_UNIT IS NOT NULL
            AND APGR.NUMBER_OF_CLAIMS >= 5 THEN APGR.COLLECTED_PER_UNIT
            WHEN APPA.COLLECTED_PER_UNIT IS NOT NULL
            AND APPA.NUMBER_OF_CLAIMS >= 5 THEN APPA.COLLECTED_PER_UNIT
            WHEN APF.COLLECTED_PER_UNIT IS NOT NULL
            AND APF.NUMBER_OF_CLAIMS >= 5 THEN APF.COLLECTED_PER_UNIT
            WHEN APCL.COLLECTED_PER_UNIT IS NOT NULL
            AND APCL.NUMBER_OF_CLAIMS >= 5 THEN APCL.COLLECTED_PER_UNIT
            WHEN APST.COLLECTED_PER_UNIT IS NOT NULL
            AND APST.NUMBER_OF_CLAIMS >= 5 THEN APST.COLLECTED_PER_UNIT
        END AS MASTER_COLLECTED_PERIOD,
        
        APCL.NUMBER_OF_CLAIMS AS CLIENT_CLAIMS_PERIOD,
        APPR.NUMBER_OF_CLAIMS AS PAYOR_CLAIMS_PERIOD,
        APPA.NUMBER_OF_CLAIMS AS CLINIC_CLAIMS_PERIOD,
        APCO.NUMBER_OF_CLAIMS AS STATE_CLAIMS_PERIOD,
        APST.NUMBER_OF_CLAIMS AS CPT_CLAIMS_PERIOD,
        APAC.NUMBER_OF_CLAIMS AS SUBS_CLAIMS_PERIOD,
        APSU.NUMBER_OF_CLAIMS AS GROUP_CLAIMS_PERIOD,
        APGR.NUMBER_OF_CLAIMS AS FUNDED_CLAIMS_PERIOD,
        APF.NUMBER_OF_CLAIMS AS PREFIX_CLAIMS_PERIOD
        
    FROM
    
        MASTER_DATA A
        
        LEFT JOIN ALLOWED_BY_CLIENT B ON A.CONNECT_TRACKING_ID = B.CONNECT_TRACKING_ID
        --AND A.CPT = B.CPT
        AND A.PAYOR = B.PAYOR
        AND YEAR(A.DOS) = B.DOS
        AND A.SCA_FLAG = B.SCA_FLAG
        LEFT JOIN ALLOWED_BY_PAYOR C ON A.PAYOR = C.PAYOR
        --AND C.CPT = A.CPT
        AND YEAR(A.DOS) = C.DOS
        AND A.SCA_FLAG = C.SCA_FLAG
        LEFT JOIN ALLOWED_BY_COMPANY D ON A.COMPANYNAME = D.COMPANYNAME
        --AND A.CPT = D.CPT
        AND YEAR(A.DOS) = D.DOS
        AND A.SCA_FLAG = D.SCA_FLAG
        LEFT JOIN COLLAB_DATA.PUBLIC.COMPANY E ON A.COMPANYNAME = E.COMPANYNAME
        LEFT JOIN ALLOWED_BY_STATE F ON A.STATE = F.STATE
        --AND A.CPT = F.CPT
        AND YEAR(A.DOS) = F.DOS
        AND A.SCA_FLAG = F.SCA_FLAG
        LEFT JOIN ALLOWED_BY_ALL_COMPANY G ON --G.CPT = A.CPT AND
        YEAR(A.DOS) = G.DOS
        AND A.SCA_FLAG = G.SCA_FLAG
        LEFT JOIN ALLOWED_BY_SUBS H ON A.SUBSCRIBER = H.SUBSCRIBER
        --AND H.CPT = A.CPT
        AND YEAR(A.DOS) = H.DOS
        AND A.SCA_FLAG = H.SCA_FLAG
        LEFT JOIN ALLOWED_BY_GROUP I ON A.GROUP_NUMBER = I.GROUP_NUMBER
        --AND I.CPT = A.CPT
        AND YEAR(A.DOS) = I.DOS
        AND A.SCA_FLAG = I.SCA_FLAG
        LEFT JOIN ALLOWED_BY_FUNDED J ON A.FUNDED_STATUS = J.FUNDED_STATUS
        --AND J.CPT = A.CPT
        AND YEAR(A.DOS) = J.DOS
        AND A.SCA_FLAG = J.SCA_FLAG
        LEFT JOIN ALLOWED_BY_PREFIX P ON P.PREFIX = A.PREFIX
        --AND P.CPT = A.CPT
        AND YEAR(A.DOS) = P.DOS
        AND A.SCA_FLAG = P.SCA_FLAG
        ---------------------- PAST YEAR --------------------------------------------
        LEFT JOIN ALLOWED_BY_CLIENT APYCL ON A.CONNECT_TRACKING_ID = APYCL.CONNECT_TRACKING_ID
        --AND A.CPT = APYCL.CPT
        AND A.PAYOR = APYCL.PAYOR
        AND YEAR(A.DOS)-1 = APYCL.DOS
        AND A.SCA_FLAG = APYCL.SCA_FLAG
        LEFT JOIN ALLOWED_BY_PAYOR APYPA ON A.PAYOR = APYPA.PAYOR
        --AND APYPA.CPT = A.CPT
        AND YEAR(A.DOS)-1 = APYPA.DOS
        AND A.SCA_FLAG = APYPA.SCA_FLAG
        LEFT JOIN ALLOWED_BY_COMPANY APYCO ON A.COMPANYNAME = APYCO.COMPANYNAME
        --AND A.CPT = APYCO.CPT
        AND YEAR(A.DOS)-1 = APYCO.DOS
        AND A.SCA_FLAG = APYCO.SCA_FLAG
        LEFT JOIN ALLOWED_BY_STATE APYST ON A.STATE = APYST.STATE
        --AND A.CPT = APYST.CPT
        AND YEAR(A.DOS)-1 = APYST.DOS
        AND A.SCA_FLAG = APYST.SCA_FLAG
        LEFT JOIN ALLOWED_BY_ALL_COMPANY APYAC ON --APYAC.CPT = A.CPT AND
        YEAR(A.DOS)-1 = APYAC.DOS
        AND A.SCA_FLAG = APYAC.SCA_FLAG
        LEFT JOIN ALLOWED_BY_SUBS APYSU ON A.SUBSCRIBER = APYSU.SUBSCRIBER
        --AND APYSU.CPT = A.CPT
        AND YEAR(A.DOS)-1 = APYSU.DOS
        AND A.SCA_FLAG = APYSU.SCA_FLAG
        LEFT JOIN ALLOWED_BY_GROUP APYGR ON A.GROUP_NUMBER = APYGR.GROUP_NUMBER
        --AND APYGR.CPT = A.CPT
        AND YEAR(A.DOS)-1 = APYGR.DOS
        AND A.SCA_FLAG = APYGR.SCA_FLAG
        LEFT JOIN ALLOWED_BY_FUNDED APYFU ON A.FUNDED_STATUS = APYFU.FUNDED_STATUS
        --AND APYFU.CPT = A.CPT
        AND YEAR(A.DOS)-1 = APYFU.DOS
        AND A.SCA_FLAG = APYFU.SCA_FLAG
        LEFT JOIN ALLOWED_BY_PREFIX APYPR ON P.PREFIX = APYPR.PREFIX
        --AND APYPR.CPT = A.CPT
        AND YEAR(A.DOS)-1 = APYPR.DOS
        AND A.SCA_FLAG = APYPR.SCA_FLAG
        ---------------------- SPECIFIC PERIOD OF TIME ------------------------------
        LEFT JOIN ALLOWED_BY_CLIENT_PERIOD APCL ON A.CONNECT_TRACKING_ID = APCL.CONNECT_TRACKING_ID
        --AND A.CPT = APCL.CPT
        AND A.PAYOR = APCL.PAYOR
        AND YEAR(A.DOS) = APCL.DOS
        AND A.SCA_FLAG = APCL.SCA_FLAG
        LEFT JOIN ALLOWED_BY_PAYOR_PERIOD APPA ON A.PAYOR = APPA.PAYOR
        --AND C.CPT = APPA.CPT
        AND YEAR(A.DOS) = APPA.DOS
        AND A.SCA_FLAG = APPA.SCA_FLAG
        LEFT JOIN ALLOWED_BY_COMPANY_PERIOD APCO ON A.COMPANYNAME = APCO.COMPANYNAME
        --AND A.CPT = APCO.CPT
        AND YEAR(A.DOS) = APCO.DOS
        AND A.SCA_FLAG = APCO.SCA_FLAG
        LEFT JOIN ALLOWED_BY_STATE_PERIOD APST ON A.STATE = APST.STATE
        --AND A.CPT = APST.CPT
        AND YEAR(A.DOS) = APST.DOS
        AND A.SCA_FLAG = APST.SCA_FLAG
        LEFT JOIN ALLOWED_BY_ALL_COMPANY_PERIOD APAC ON --APAC.CPT = A.CPT AND
        YEAR(A.DOS) = APAC.DOS
        AND A.SCA_FLAG = APAC.SCA_FLAG
        LEFT JOIN ALLOWED_BY_SUBS_PERIOD APSU ON A.SUBSCRIBER = APSU.SUBSCRIBER
        --AND APSU.CPT = A.CPT
        AND YEAR(A.DOS) = APSU.DOS
        AND A.SCA_FLAG = APSU.SCA_FLAG
        LEFT JOIN ALLOWED_BY_GROUP_PERIOD APGR ON A.GROUP_NUMBER = APGR.GROUP_NUMBER
        --AND APGR.CPT = A.CPT
        AND YEAR(A.DOS) = APGR.DOS
        AND A.SCA_FLAG = APGR.SCA_FLAG
        LEFT JOIN ALLOWED_BY_FUNDED_PERIOD APF ON A.FUNDED_STATUS = APF.FUNDED_STATUS
        --AND APF.CPT = A.CPT
        AND YEAR(A.DOS) = APF.DOS
        AND A.SCA_FLAG = APF.SCA_FLAG
        LEFT JOIN ALLOWED_BY_PREFIX_PERIOD APPR ON APPR.PREFIX = A.PREFIX
        --AND APPR.CPT = A.CPT
        AND YEAR(A.DOS) = APPR.DOS
        AND A.SCA_FLAG = APPR.SCA_FLAG
),FINAL AS (SELECT
    CLIENT_NAME,
    CONNECT_TRACKING_ID,
    PAYOR,
    SCA_FLAG,
    YEAR(DOS) AS DOS,
    STATE,
    FUNDED_STATUS,
    SUBSCRIBER,
    GROUP_NUMBER,
    PREFIX,
    MAX(MULTIPLAN_FLAG) MULTIPLAN_FLAG,
    --MODE(STATE) AS STATE,
    --MODE(FUNDED_STATUS) AS FUNDED_STATUS,
    --MODE(SUBSCRIBER) AS SUBSCRIBER,
    --MODE(GROUP_NUMBER) AS GROUP_NUMBER,
    MODE(OON_BENEFITS) AS OON_BENEFITS,
    MODE(POLICY_TYPE) AS POLICY_TYPE,
    MODE(COBRA) AS COBRA,
    MODE(PAYOR_TYPE) AS PAYOR_TYPE,
    AVG(DEDUCTIBLE) AS DEDUCTIBLE,
    AVG(OUT_OF_POCKET) AS OUT_OF_POCKET,
    AVG(CO_INSURANCE) AS CO_INSURANCE,
    AVG(COPAY) AS COPAY,
    AVG(RATE_SCA) AS RATE_SCA,
    
    AVG(CLIENT_$) AS CLIENT_$,
    AVG(PREFIX_$) AS PREFIX_$,
    AVG(CPT_$) AS CPT_$,
    AVG(SUBS_$) AS SUBS_$,
    AVG(GROUP_$) AS GROUP_$,
    AVG(PAYOR_$) AS PAYOR_$,
    AVG(FUNDED_$) AS FUNDED_$,
    AVG(CLINIC_$) AS CLINIC_$,
    AVG(STATE_$) AS STATE_$,
    AVG(MASTER_COLLECTED) AS MASTER_COLLECTED,
    
    AVG(PAID_CLAIM_$) AS PAID_CLAIM_$,
    
    SUM(CLIENT_CLAIMS) AS CLIENT_CLAIMS,
    SUM(PAYOR_CLAIMS) AS PAYOR_CLAIMS,
    SUM(CLINIC_CLAIMS) AS CLINIC_CLAIMS,
    SUM(STATE_CLAIMS) AS STATE_CLAIMS,
    SUM(CPT_CLAIMS) AS CPT_CLAIMS,
    SUM(SUBS_CLAIMS) AS SUBS_CLAIMS,
    SUM(GROUP_CLAIMS) AS GROUP_CLAIMS,
    SUM(FUNDED_CLAIMS) AS FUNDED_CLAIMS,
    SUM(PREFIX_CLAIMS) AS PREFIX_CLAIMS,
    SUM(CLAIM_AMOUNT_BILLED) AS CLAIM_AMOUNT_PAID,
    
    SUM(CLIENT_BILL) AS CLIENT_BILL,
    SUM(PREFIX_BILL) AS PREFIX_BILL,
    SUM(PAYOR_BILL) AS PAYOR_BILL,
    SUM(CLINIC_BILL) AS CLINIC_BILL,
    SUM(STATE_BILL) AS STATE_BILL,
    SUM(CPT_BILL) AS CPT_BILL,
    SUM(SUBS_BILL) AS SUBS_BILL,
    SUM(GROUP_BILL) AS GROUP_BILL,
    SUM(FUNDED_BILL) AS FUNDED_BILL,
    SUM(CLAIM_INSURANCE_PAID) AS CLAIM_INSURANCE_PAID,

    --------------- PREVIOUS YEAR --------------------------------------

    AVG(CLIENT_$_PY) AS CLIENT_$_PY,
    AVG(PREFIX_$_PY) AS PREFIX_$_PY,
    AVG(CPT_$_PY) AS CPT_$_PY,
    AVG(SUBS_$_PY) AS SUBS_$_PY,
    AVG(GROUP_$_PY) AS GROUP_$_PY,
    AVG(PAYOR_$_PY) AS PAYOR_$_PY,
    AVG(FUNDED_$_PY) AS FUNDED_$_PY,
    AVG(CLINIC_$_PY) AS CLINIC_$_PY,
    AVG(STATE_$_PY) AS STATE_$_PY,
    --AVG(MASTER_COLLECTED_PY) AS MASTER_COLLECTED_PY,
    
    SUM(CLIENT_CLAIMS_PY) AS CLIENT_CLAIMS_PY,
    SUM(PAYOR_CLAIMS_PY) AS PAYOR_CLAIMS_PY,
    SUM(CLINIC_CLAIMS_PY) AS CLINIC_CLAIMS_PY,
    SUM(STATE_CLAIMS_PY) AS STATE_CLAIMS_PY,
    SUM(CPT_CLAIMS_PY) AS CPT_CLAIMS_PY,
    SUM(SUBS_CLAIMS_PY) AS SUBS_CLAIMS_PY,
    SUM(GROUP_CLAIMS_PY) AS GROUP_CLAIMS_PY,
    SUM(FUNDED_CLAIMS_PY) AS FUNDED_CLAIMS_PY,
    SUM(PREFIX_CLAIMS_PY) AS PREFIX_CLAIMS_PY,
    
    SUM(CLIENT_BILL_PY) AS CLIENT_BILL_PY,
    SUM(PREFIX_BILL_PY) AS PREFIX_BILL_PY,
    SUM(PAYOR_BILL_PY) AS PAYOR_BILL_PY,
    SUM(CLINIC_BILL_PY) AS CLINIC_BILL_PY,
    SUM(STATE_BILL_PY) AS STATE_BILL_PY,
    SUM(CPT_BILL_PY) AS CPT_BILL_PY,
    SUM(SUBS_BILL_PY) AS SUBS_BILL_PY,
    SUM(GROUP_BILL_PY) AS GROUP_BILL_PY,
    SUM(FUNDED_BILL_PY) AS FUNDED_BILL_PY,

    --------------- SPECIFIC PERIOD OF TIME ----------------------------

    AVG(CLIENT_$_PERIOD) AS CLIENT_$_PERIOD,
    AVG(PREFIX_$_PERIOD) AS PREFIX_$_PERIOD,
    AVG(CPT_$_PERIOD) AS CPT_$_PERIOD,
    AVG(SUBS_$_PERIOD) AS SUBS_$_PERIOD,
    AVG(GROUP_$_PERIOD) AS GROUP_$_PERIOD,
    AVG(PAYOR_$_PERIOD) AS PAYOR_$_PERIOD,
    AVG(FUNDED_$_PERIOD) AS FUNDED_$_PERIOD,
    AVG(CLINIC_$_PERIOD) AS CLINIC_$_PERIOD,
    AVG(STATE_$_PERIOD) AS STATE_$_PERIOD,
    AVG(MASTER_COLLECTED_PERIOD) AS MASTER_COLLECTED_PERIOD,
    
    SUM(CLIENT_CLAIMS_PERIOD) AS CLIENT_CLAIMS_PERIOD,
    SUM(PAYOR_CLAIMS_PERIOD) AS PAYOR_CLAIMS_PERIOD,
    SUM(CLINIC_CLAIMS_PERIOD) AS CLINIC_CLAIMS_PERIOD,
    SUM(STATE_CLAIMS_PERIOD) AS STATE_CLAIMS_PERIOD,
    SUM(CPT_CLAIMS_PERIOD) AS CPT_CLAIMS_PERIOD,
    SUM(SUBS_CLAIMS_PERIOD) AS SUBS_CLAIMS_PERIOD,
    SUM(GROUP_CLAIMS_PERIOD) AS GROUP_CLAIMS_PERIOD,
    SUM(FUNDED_CLAIMS_PERIOD) AS FUNDED_CLAIMS_PERIOD,
    SUM(PREFIX_CLAIMS_PERIOD) AS PREFIX_CLAIMS_PERIOD,
    
    SUM(CLIENT_BILL_PERIOD) AS CLIENT_BILL_PERIOD,
    SUM(PREFIX_BILL_PERIOD) AS PREFIX_BILL_PERIOD,
    SUM(PAYOR_BILL_PERIOD) AS PAYOR_BILL_PERIOD,
    SUM(CLINIC_BILL_PERIOD) AS CLINIC_BILL_PERIOD,
    SUM(STATE_BILL_PERIOD) AS STATE_BILL_PERIOD,
    SUM(CPT_BILL_PERIOD) AS CPT_BILL_PERIOD,
    SUM(SUBS_BILL_PERIOD) AS SUBS_BILL_PERIOD,
    SUM(GROUP_BILL_PERIOD) AS GROUP_BILL_PERIOD,
    SUM(FUNDED_BILL_PERIOD) AS FUNDED_BILL_PERIOD,
    
    SUM(COLLECTED) AS COLLECTED,
    SUM(CLAIM_BALANCE) AS CLAIM_BALANCE,
    SUM(CLAIM_CLIENT_PAID) AS CLAIM_CLIENT_PAID,
    SUM(UNITS) AS UNITS,
    SUM(ALLOWED) AS ALLOWED,
    SUM(ADJUSTMENT) AS ADJSUTMENT
FROM
    LAST_DATA
    WHERE YEAR(DOS)='2023' 
GROUP BY
    1,
    2,
    3,
    4,
    5,6,7,8,9,10
order by
    1)
    
SELECT * FROM FINAL
--"""